#include <iostream>
#include "rectangle.h"
#include "move.h"


class Rectangle {
protected:
    double length, height;
    double X, Y;

public:
    // Конструктор с полным набором параметров
    Rectangle(double l, double h, double cX, double cY)
        : length(l), height(h), X(cX), Y(cY) {}

    // Функция вывода значений параметров, задающих фигуру
    void printParameters() const {
        std::cout << "Length: " << length << ", Height: " << height
                  << ", Center: (" << X << ", " << Y << ")\n";
    }

    // Функция, возвращающая 1 (истина), если указанная точка принадлежит границе фигуры
    bool isPointOnBoundary(double x, double y) const {
        double half_length = length / 2;
        double half_height = height / 2;
        
        double left = X - half_length;
        double right = X + half_length;
        double top = Y + half_height;
        double bottom = Y - half_height;
        
        bool on_left_or_right = (x == left || x == right) && (bottom <= y && y <= top);
        bool on_top_or_bottom = (y == top || y == bottom) && (left <= x && x <= right);
        
        return on_left_or_right || on_top_or_bottom;
    }

    // Функция, возвращающая 1, если объект пересекает ось абсцисс
    bool intersectsX() const {
        double half_height = height / 2;
        double top = Y + half_height;
        double bottom = Y - half_height;
        return bottom <= 0 && 0 <= top;
    }

    // Функция, возвращающая 1, если объект пересекает ось ординат
    bool intersectsY() const {
        double half_length = length / 2;
        double left = X - half_length;
        double right = X + half_length;
        return left <= 0 && 0 <= right;
    }
};

class MovableRectangle : public Rectangle {
private:
    double original_X, original_Y;

public:
    // Конструктор с запоминанием первоначального положения
    MovableRectangle(double l, double h, double cX, double cY)
        : Rectangle(l, h, cX, cY), original_X(cX), original_Y(cY) {}

    // Функция перемещения центра в новую точку
    void move(double new_X, double new_Y) {
        X = new_X;
        Y = new_Y;
    }

    // Функция сброса в первоначальное положение
    void resetPosition() {
        X = original_X;
        Y = original_Y;
    }
};

// Пример использования
int main() {
    double length, height, X, Y, flag = 1, X1, Y1;

    std::cout << "Enter Length and Height: ";
    std::cin >> length >> height;
    std::cout << "Enter X and Y: ";
    std::cin >> X >> Y;
    std::cout << std::endl;

    MovableRectangle rect(length, height, X, Y);
    rect.printParameters();

    std::cout << "On boundary: " << (rect.isPointOnBoundary(1, 0) ? "Yes" : "No") << std::endl;
    std::cout << "Intersects X: " << (rect.intersectsX() ? "Yes" : "No") << std::endl;
    std::cout << "Intersects Y: " << (rect.intersectsY() ? "Yes" : "No") << std::endl;


    while (flag != 0)
    {
        std::cout << "1. Show infortion" << std::endl << "2. New place of point" << std::endl << "3. Move point" << std::endl;
        std::cout << "4. Reset position" << std::endl << "0. Exit" << std::endl;
        std::cin >> flag;
        if (flag == 0) break;
        else if (flag == 1)
        {
            
            rect.printParameters();
            std::cout << "On boundary: " << (rect.isPointOnBoundary(1, 0) ? "Yes" : "No") << std::endl;
            std::cout << "Intersects X: " << (rect.intersectsX() ? "Yes" : "No") << std::endl;
            std::cout << "Intersects Y: " << (rect.intersectsY() ? "Yes" : "No") << std::endl;
        } 
        else if (flag == 2)
        {
            // Перемещение в новую точку
            std::cout << "Enter X and Y: " << std::endl;
            std::cin >> X >> Y;
            rect.move(X, Y);
            std::cout << "After moving to (" << X << ", " << Y << ")" << std::endl;
            rect.printParameters();
        }
        else if (flag == 3)
        {
            // Перемещение на заданное смещение
            std::cout << "Enter X and Y: " << std::endl;
            std::cin >> X1 >> Y1;
            rect.move(X + X1, Y + Y1);
            std::cout << "After moving to (" << X1 << ", " << Y1 << ")" << std::endl;
            rect.printParameters();
        }
        else if (flag == 4)
        {
            // Сброс в первоначальное положение
            rect.resetPosition();
            std::cout << "After resetting to original position:\n";
            rect.printParameters();
        }
        
    }
    return 0;
}
